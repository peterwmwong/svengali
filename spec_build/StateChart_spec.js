System.register(["base/build/svengali"], function($__export) {
  "use strict";
  var StateChart,
      attrValue;
  return {
    setters: [function(m) {
      StateChart = m.StateChart;
      attrValue = m.attrValue;
    }],
    execute: function() {
      describe('StateChart', (function() {
        describe('attrs:', (function() {
          it('simple values', (function() {
            var stateChart = new StateChart({
              attrs: {root_attr: 'root value'},
              default: 'on',
              states: {
                'on': {attrs: {
                    numZero: 0,
                    numOne: 1,
                    string: 'a string',
                    array: [1, 2, 3],
                    object: {
                      a: 1,
                      b: 2,
                      c: 3
                    }
                  }},
                'off': {attrs: {off_attr: 'off value'}}
              }
            });
            stateChart.goto();
            expect(stateChart.attrs).toEqual({
              root_attr: 'root value',
              numZero: 0,
              numOne: 1,
              string: 'a string',
              array: [1, 2, 3],
              object: {
                a: 1,
                b: 2,
                c: 3
              }
            });
            stateChart.goto('off');
            expect(stateChart.attrs).toEqual({
              root_attr: 'root value',
              off_attr: 'off value'
            });
            stateChart.goto('./on');
            expect(stateChart.attrs).toEqual({
              root_attr: 'root value',
              numZero: 0,
              numOne: 1,
              string: 'a string',
              array: [1, 2, 3],
              object: {
                a: 1,
                b: 2,
                c: 3
              }
            });
          }));
          it('Promise and function values', (function() {
            var funcVal = (function() {});
            var promiseVal = Promise.resolve(5);
            var stateChart = new StateChart({attrs: {
                funcVal: attrValue(funcVal),
                promiseVal: (function() {
                  return attrValue(promiseVal);
                })
              }});
            stateChart.goto();
            expect(stateChart.attrs.funcVal).toBe(funcVal);
            expect(stateChart.attrs.promiseVal).toBe(promiseVal);
          }));
          it('initializer functions', (function() {
            var id = 0;
            var stateChart = new StateChart({
              default: 'on',
              states: {
                'on': {attrs: {on_attr: (function() {
                      return ("on: " + id++);
                    })}},
                'off': {attrs: {off_attr: (function() {
                      return ("off: " + id++);
                    })}}
              }
            });
            stateChart.goto();
            expect(stateChart.attrs).toEqual({on_attr: 'on: 0'});
            stateChart.goto('off');
            expect(stateChart.attrs).toEqual({off_attr: 'off: 1'});
            stateChart.goto('./on');
            expect(stateChart.attrs).toEqual({on_attr: 'on: 2'});
          }));
          it('initializer functions with `params`', (function() {
            var stateChart = new StateChart({
              params: ['a', 'b', 'c'],
              attrs: {one: (function(paramArgs) {
                  return paramArgs;
                })}
            });
            var args = {
              a: 1,
              b: 2,
              c: 3
            };
            stateChart.goto('.', args);
            expect(stateChart.attrs.one).toEqual(args);
          }));
          it('initializer functions returning a Promise', (function(done) {
            var onResolve,
                offResolve;
            var stateChart = new StateChart({
              default: 'on',
              states: {
                'on': {attrs: {on_attr: (function() {
                      return new Promise((function(resolve) {
                        return onResolve = resolve;
                      }));
                    })}},
                'off': {attrs: {off_attr: (function() {
                      return new Promise((function(resolve) {
                        return offResolve = resolve;
                      }));
                    })}}
              }
            });
            stateChart.goto();
            expect(stateChart.attrs).toEqual({});
            Promise.resolve(onResolve('on resolved value')).then((function() {
              expect(stateChart.attrs).toEqual({on_attr: 'on resolved value'});
              stateChart.goto('off');
              offResolve('off resolved value');
            })).then((function() {
              expect(stateChart.attrs).toEqual({off_attr: 'off resolved value'});
            })).then(done);
          }));
          it('initializer functions returning a Promise (no effect if state changes)', (function(done) {
            var onResolve,
                offResolve;
            var stateChart = new StateChart({
              default: 'on',
              states: {
                'on': {attrs: {on_attr: (function() {
                      return new Promise((function(resolve) {
                        return onResolve = resolve;
                      }));
                    })}},
                'off': {attrs: {off_attr: (function() {
                      return new Promise((function(resolve) {
                        return offResolve = resolve;
                      }));
                    })}}
              }
            });
            stateChart.goto();
            expect(stateChart.attrs).toEqual({});
            stateChart.goto('off');
            Promise.resolve(onResolve('on resolved value')).then((function() {
              expect(stateChart.attrs).toEqual({});
              offResolve('off resolved value');
            })).then((function() {
              expect(stateChart.attrs).toEqual({off_attr: 'off resolved value'});
            })).then(done);
          }));
        }));
        describe('params:', (function() {
          var stateChart;
          beforeEach((function() {
            stateChart = new StateChart({
              default: 'default',
              states: {
                'default': {},
                'withParams': {
                  params: ['reqParam1', 'reqParam2'],
                  attrs: {'withParamsAttr': true}
                }
              }
            });
          }));
          it('block transition when not all params are supplied', (function() {
            stateChart.goto('withParams');
            expect(stateChart.attrs).toEqual({});
            stateChart.goto('withParams', {reqParam1: 1});
            expect(stateChart.attrs).toEqual({});
            stateChart.goto('withParams', {reqParam2: 2});
            expect(stateChart.attrs).toEqual({});
          }));
          it('allows transition when all params are supplied', (function() {
            stateChart.goto('withParams', {
              reqParam1: 1,
              reqParam2: 2
            });
            expect(stateChart.attrs).toEqual({withParamsAttr: true});
          }));
        }));
      }));
    }
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiU3RhdGVDaGFydF9zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssU0FBUyxBQUFDLHlCQUFvQixVQUFTLFNBQVE7Ozs7QUNBcEQsT0FBTztBQUNELFVBQU0sR0NEWixTQUFTLENBQUE7QUNBVCxpQkFBb0IsRUFBQSxXQUFrQixDQUFDO0FBQXZDLGdCQUFvQixFQUFBLFVBQWtCLENBQUM7SURFL0IsQ0REdUI7QUFDekIsVUFBTTtBR0FaLGFBQU8sQUFBQyxDQUFDLFlBQVcsR0FBRyxTQUFBLEFBQUM7QUFFdEIsZUFBTyxBQUFDLENBQUMsUUFBTyxHQUFHLFNBQUEsQUFBQztBQUNsQixXQUFDLEFBQUMsQ0FBQyxlQUFjLEdBQUcsU0FBQSxBQUFDLENBQUc7QUFDdEIsQUFBSSxjQUFBLENBQUEsVUFBUyxFQUFJLElBQUksV0FBUyxBQUFDLENBQUM7QUFDOUIsa0JBQUksQ0FBRSxFQUFFLFNBQVEsQ0FBRSxhQUFXLENBQUU7QUFFL0Isb0JBQU0sQ0FBRyxLQUFHO0FBQ1osbUJBQUssQ0FBRTtBQUNMLG1CQUFHLENBQUUsRUFDSCxLQUFJLENBQUU7QUFDSiwwQkFBTSxDQUFJLEVBQUE7QUFDVix5QkFBSyxDQUFLLEVBQUE7QUFDVix5QkFBSyxDQUFLLFdBQVM7QUFDbkIsd0JBQUksQ0FBTSxFQUFDLENBQUEsQ0FBRSxFQUFBLENBQUUsRUFBQSxDQUFDO0FBQ2hCLHlCQUFLLENBQUs7QUFBQyxzQkFBQSxDQUFFLEVBQUE7QUFBRyxzQkFBQSxDQUFFLEVBQUE7QUFBRyxzQkFBQSxDQUFFLEVBQUE7QUFBQSxvQkFBQztBQUFBLGtCQUMxQixDQUNGO0FBQ0Esb0JBQUks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O0FBRXBDLHFCQUFTLEtBQUssQUFBQyxDQUFDLFlBQVcsQ0FBRyxFQUFDLFNBQVEsQ0FBRSxFQUFBLENBQUMsQ0FBQyxDQUFDO0FBQzVDLGlCQUFLLEFBQUMsQ0FBQyxVQUFTLE1BQU0sQ0FBQyxRQUFRLEFBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUVwQyxxQkFBUyxLQUFLLEFBQUMsQ0FBQyxZQUFXLENBQUcsRUFBQyxTQUFRLENBQUUsRUFBQSxDQUFDLENBQUMsQ0FBQztBQUM1QyxpQkFBSyxBQUFDLENBQUMsVUFBUyxNQUFNLENBQUMsUUFBUSxBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7VUFDdEMsRUFBQyxDQUFDO0FBRUYsV0FBQyxBQUFDLENBQUMsZ0RBQStDLEdBQUcsU0FBQSxBQUFDLENBQUc7QUFDdkQscUJBQVMsS0FBSyxBQUFDLENBQUMsWUFBVyxDQUFHO0FBQUMsc0JBQVEsQ0FBRSxFQUFBO0FBQUcsc0JBQVEsQ0FBRSxFQUFBO0FBQUEsWUFBQyxDQUFDLENBQUM7QUFDekQsaUJBQUssQUFBQyxDQUFDLFVBQVMsTUFBTSxDQUFDLFFBQVEsQUFBQyxDQUFDLENBQUMsY0FBYSxDQUFFLEtBQUcsQ0FBQyxDQUFDLENBQUM7VUFDekQsRUFBQyxDQUFDO1FBRUosRUFBQyxDQUFBO01BNEVILEVBQUMsQ0FBQztJSHRTNkI7RUFDM0IsQ0FBQTtBRERJLENBQUMsQ0FBQztBSXVTViIsImZpbGUiOiJTdGF0ZUNoYXJ0X3NwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJTeXN0ZW0ucmVnaXN0ZXIoJF9fcGxhY2Vob2xkZXJfXzAsIGZ1bmN0aW9uKCRfX2V4cG9ydCkge1xuICAgICAgICAgICRfX3BsYWNlaG9sZGVyX18xXG4gICAgICAgIH0pOyIsInJldHVybiB7XG4gICAgICBzZXR0ZXJzOiAkX19wbGFjZWhvbGRlcl9fMCxcbiAgICAgIGV4ZWN1dGU6ICRfX3BsYWNlaG9sZGVyX18xXG4gICAgfSIsImZ1bmN0aW9uKG0pIHtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMFxuICAgICAgICB9IiwiJF9fcGxhY2Vob2xkZXJfXzAgPSBtLiRfX3BsYWNlaG9sZGVyX18xOyIsImltcG9ydCB7U3RhdGVDaGFydCwgYXR0clZhbHVlfSBmcm9tICdiYXNlL2J1aWxkL3N2ZW5nYWxpJztcblxuZGVzY3JpYmUoJ1N0YXRlQ2hhcnQnLCAoKT0+e1xuXG4gIGRlc2NyaWJlKCdhdHRyczonLCAoKT0+e1xuICAgIGl0KCdzaW1wbGUgdmFsdWVzJywgKCk9PntcbiAgICAgIHZhciBzdGF0ZUNoYXJ0ID0gbmV3IFN0YXRlQ2hhcnQoe1xuICAgICAgICBhdHRyczp7IHJvb3RfYXR0cjoncm9vdCB2YWx1ZScgfSxcblxuICAgICAgICBkZWZhdWx0OiAnb24nLFxuICAgICAgICBzdGF0ZXM6e1xuICAgICAgICAgICdvbic6e1xuICAgICAgICAgICAgYXR0cnM6e1xuICAgICAgICAgICAgICBudW1aZXJvIDogMCxcbiAgICAgICAgICAgICAgbnVtT25lICA6IDEsXG4gICAgICAgICAgICAgIHN0cmluZyAgOiAnYSBzdHJpbmcnLFxuICAgICAgICAgICAgICBhcnJheSAgIDogWzEsMiwzXSxcbiAgICAgICAgICAgICAgb2JqZWN0ICA6IHthOjEsIGI6MiwgYzozfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ29mZic6e1xuICAgICAgICAgICAgYXR0cnM6eyBvZmZfYXR0cjonb2ZmIHZhbHVlJyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc3RhdGVDaGFydC5nb3RvKCk7XG4gICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7XG4gICAgICAgIHJvb3RfYXR0ciA6ICdyb290IHZhbHVlJyxcbiAgICAgICAgbnVtWmVybyAgIDogMCxcbiAgICAgICAgbnVtT25lICAgIDogMSxcbiAgICAgICAgc3RyaW5nICAgIDogJ2Egc3RyaW5nJyxcbiAgICAgICAgYXJyYXkgICAgIDogWzEsMiwzXSxcbiAgICAgICAgb2JqZWN0ICAgIDoge2E6MSwgYjoyLCBjOjN9XG4gICAgICB9KTtcblxuICAgICAgIHN0YXRlQ2hhcnQuZ290bygnb2ZmJyk7XG4gICAgICAgZXhwZWN0KHN0YXRlQ2hhcnQuYXR0cnMpLnRvRXF1YWwoe1xuICAgICAgICAgcm9vdF9hdHRyIDogJ3Jvb3QgdmFsdWUnLFxuICAgICAgICAgb2ZmX2F0dHIgIDogJ29mZiB2YWx1ZSdcbiAgICAgICB9KTtcblxuICAgICAgIHN0YXRlQ2hhcnQuZ290bygnLi9vbicpO1xuICAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHtcbiAgICAgICAgIHJvb3RfYXR0ciA6ICdyb290IHZhbHVlJyxcbiAgICAgICAgIG51bVplcm8gICA6IDAsXG4gICAgICAgICBudW1PbmUgICAgOiAxLFxuICAgICAgICAgc3RyaW5nICAgIDogJ2Egc3RyaW5nJyxcbiAgICAgICAgIGFycmF5ICAgICA6IFsxLDIsM10sXG4gICAgICAgICBvYmplY3QgICAgOiB7YToxLCBiOjIsIGM6M31cbiAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdQcm9taXNlIGFuZCBmdW5jdGlvbiB2YWx1ZXMnLCAoKT0+e1xuICAgICAgdmFyIGZ1bmNWYWwgPSAoKT0+e307XG4gICAgICB2YXIgcHJvbWlzZVZhbCA9IFByb21pc2UucmVzb2x2ZSg1KTtcbiAgICAgIHZhciBzdGF0ZUNoYXJ0ID0gbmV3IFN0YXRlQ2hhcnQoe1xuICAgICAgICBhdHRyczp7XG4gICAgICAgICAgZnVuY1ZhbDogYXR0clZhbHVlKGZ1bmNWYWwpLFxuICAgICAgICAgIHByb21pc2VWYWw6ICgpPT4gYXR0clZhbHVlKHByb21pc2VWYWwpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oKTtcblxuICAgICAgZXhwZWN0KHN0YXRlQ2hhcnQuYXR0cnMuZnVuY1ZhbCkudG9CZShmdW5jVmFsKTtcbiAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzLnByb21pc2VWYWwpLnRvQmUocHJvbWlzZVZhbCk7XG4gICAgfSlcblxuICAgIGl0KCdpbml0aWFsaXplciBmdW5jdGlvbnMnLCAoKT0+e1xuICAgICAgdmFyIGlkID0gMDtcbiAgICAgIHZhciBzdGF0ZUNoYXJ0ID0gbmV3IFN0YXRlQ2hhcnQoe1xuICAgICAgICBkZWZhdWx0OiAnb24nLFxuICAgICAgICBzdGF0ZXM6e1xuICAgICAgICAgICdvbic6e1xuICAgICAgICAgICAgYXR0cnM6eyBvbl9hdHRyOigpPT5gb246ICR7aWQrK31gIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdvZmYnOntcbiAgICAgICAgICAgIGF0dHJzOnsgb2ZmX2F0dHI6KCk9PmBvZmY6ICR7aWQrK31gIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oKTtcbiAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHtcbiAgICAgICAgb25fYXR0cjogJ29uOiAwJ1xuICAgICAgfSk7XG5cbiAgICAgICBzdGF0ZUNoYXJ0LmdvdG8oJ29mZicpO1xuICAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHtcbiAgICAgICAgIG9mZl9hdHRyOiAnb2ZmOiAxJ1xuICAgICAgIH0pO1xuXG4gICAgICAgc3RhdGVDaGFydC5nb3RvKCcuL29uJyk7XG4gICAgICAgZXhwZWN0KHN0YXRlQ2hhcnQuYXR0cnMpLnRvRXF1YWwoe1xuICAgICAgICAgb25fYXR0cjogJ29uOiAyJ1xuICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2luaXRpYWxpemVyIGZ1bmN0aW9ucyB3aXRoIGBwYXJhbXNgJywgKCk9PntcbiAgICAgIHZhciBzdGF0ZUNoYXJ0ID0gbmV3IFN0YXRlQ2hhcnQoe1xuICAgICAgICBwYXJhbXM6IFsnYScsJ2InLCdjJ10sXG4gICAgICAgIGF0dHJzOnsgb25lOihwYXJhbUFyZ3MpPT5wYXJhbUFyZ3MgfVxuICAgICAgfSk7XG4gICAgICB2YXIgYXJncyA9IHthOjEsIGI6MiwgYzozfTtcblxuICAgICAgc3RhdGVDaGFydC5nb3RvKCcuJywgYXJncyk7XG4gICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycy5vbmUpLnRvRXF1YWwoYXJncyk7XG4gICAgfSk7XG5cbiAgICBpdCgnaW5pdGlhbGl6ZXIgZnVuY3Rpb25zIHJldHVybmluZyBhIFByb21pc2UnLCAoZG9uZSk9PntcbiAgICAgIHZhciBvblJlc29sdmUsIG9mZlJlc29sdmU7XG4gICAgICB2YXIgc3RhdGVDaGFydCA9IG5ldyBTdGF0ZUNoYXJ0KHtcbiAgICAgICAgZGVmYXVsdDogJ29uJyxcbiAgICAgICAgc3RhdGVzOntcbiAgICAgICAgICAnb24nOntcbiAgICAgICAgICAgIGF0dHJzOntcbiAgICAgICAgICAgICAgb25fYXR0cjooKT0+bmV3IFByb21pc2UoKHJlc29sdmUpPT5vblJlc29sdmUgPSByZXNvbHZlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ29mZic6e1xuICAgICAgICAgICAgYXR0cnM6e1xuICAgICAgICAgICAgICBvZmZfYXR0cjooKT0+bmV3IFByb21pc2UoKHJlc29sdmUpPT5vZmZSZXNvbHZlID0gcmVzb2x2ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oKTtcbiAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHt9KTtcblxuICAgICAgUHJvbWlzZS5yZXNvbHZlKG9uUmVzb2x2ZSgnb24gcmVzb2x2ZWQgdmFsdWUnKSlcbiAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7XG4gICAgICAgICAgICBvbl9hdHRyOiAnb24gcmVzb2x2ZWQgdmFsdWUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzdGF0ZUNoYXJ0LmdvdG8oJ29mZicpO1xuICAgICAgICAgIG9mZlJlc29sdmUoJ29mZiByZXNvbHZlZCB2YWx1ZScpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKT0+e1xuICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHtcbiAgICAgICAgICAgIG9mZl9hdHRyOiAnb2ZmIHJlc29sdmVkIHZhbHVlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihkb25lKTtcbiAgICB9KTtcblxuICAgIGl0KCdpbml0aWFsaXplciBmdW5jdGlvbnMgcmV0dXJuaW5nIGEgUHJvbWlzZSAobm8gZWZmZWN0IGlmIHN0YXRlIGNoYW5nZXMpJywgKGRvbmUpPT57XG4gICAgICB2YXIgb25SZXNvbHZlLCBvZmZSZXNvbHZlO1xuICAgICAgdmFyIHN0YXRlQ2hhcnQgPSBuZXcgU3RhdGVDaGFydCh7XG4gICAgICAgIGRlZmF1bHQ6ICdvbicsXG4gICAgICAgIHN0YXRlczp7XG4gICAgICAgICAgJ29uJzp7XG4gICAgICAgICAgICBhdHRyczp7XG4gICAgICAgICAgICAgIG9uX2F0dHI6KCk9Pm5ldyBQcm9taXNlKChyZXNvbHZlKT0+b25SZXNvbHZlID0gcmVzb2x2ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdvZmYnOntcbiAgICAgICAgICAgIGF0dHJzOntcbiAgICAgICAgICAgICAgb2ZmX2F0dHI6KCk9Pm5ldyBQcm9taXNlKChyZXNvbHZlKT0+b2ZmUmVzb2x2ZSA9IHJlc29sdmUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc3RhdGVDaGFydC5nb3RvKCk7XG4gICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7fSk7XG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oJ29mZicpO1xuXG4gICAgICBQcm9taXNlLnJlc29sdmUob25SZXNvbHZlKCdvbiByZXNvbHZlZCB2YWx1ZScpKVxuICAgICAgICAudGhlbigoKT0+e1xuICAgICAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHt9KTtcbiAgICAgICAgICBvZmZSZXNvbHZlKCdvZmYgcmVzb2x2ZWQgdmFsdWUnKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7XG4gICAgICAgICAgICBvZmZfYXR0cjogJ29mZiByZXNvbHZlZCB2YWx1ZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZG9uZSk7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcmFtczonLCAoKT0+e1xuICAgIHZhciBzdGF0ZUNoYXJ0O1xuXG4gICAgYmVmb3JlRWFjaCgoKT0+e1xuICAgICAgc3RhdGVDaGFydCA9IG5ldyBTdGF0ZUNoYXJ0KHtcbiAgICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICAgICAgICBzdGF0ZXM6e1xuICAgICAgICAgICdkZWZhdWx0Jzp7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnd2l0aFBhcmFtcyc6e1xuICAgICAgICAgICAgcGFyYW1zOiBbJ3JlcVBhcmFtMScsJ3JlcVBhcmFtMiddLFxuICAgICAgICAgICAgYXR0cnM6e1xuICAgICAgICAgICAgICAnd2l0aFBhcmFtc0F0dHInOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdibG9jayB0cmFuc2l0aW9uIHdoZW4gbm90IGFsbCBwYXJhbXMgYXJlIHN1cHBsaWVkJywgKCk9PntcbiAgICAgIHN0YXRlQ2hhcnQuZ290bygnd2l0aFBhcmFtcycpO1xuICAgICAgZXhwZWN0KHN0YXRlQ2hhcnQuYXR0cnMpLnRvRXF1YWwoe30pO1xuXG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oJ3dpdGhQYXJhbXMnLCB7cmVxUGFyYW0xOjF9KTtcbiAgICAgIGV4cGVjdChzdGF0ZUNoYXJ0LmF0dHJzKS50b0VxdWFsKHt9KTtcblxuICAgICAgc3RhdGVDaGFydC5nb3RvKCd3aXRoUGFyYW1zJywge3JlcVBhcmFtMjoyfSk7XG4gICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnYWxsb3dzIHRyYW5zaXRpb24gd2hlbiBhbGwgcGFyYW1zIGFyZSBzdXBwbGllZCcsICgpPT57XG4gICAgICBzdGF0ZUNoYXJ0LmdvdG8oJ3dpdGhQYXJhbXMnLCB7cmVxUGFyYW0xOjEsIHJlcVBhcmFtMjoyfSk7XG4gICAgICBleHBlY3Qoc3RhdGVDaGFydC5hdHRycykudG9FcXVhbCh7d2l0aFBhcmFtc0F0dHI6dHJ1ZX0pO1xuICAgIH0pO1xuXG4gIH0pXG5cbiAgLy8gZGVzY3JpYmUoJ0xvZ2luJywgKCk9PntcbiAgLy8gICB2YXIgc3RhdGVDaGFydDtcbiAgLy9cbiAgLy8gICBiZWZvcmVFYWNoKCgpPT57XG4gIC8vICAgICBuZXcgUm91dGVyKFtcbiAgLy8gICAgICAgcGF0aCgnLycsIHJlZGlyZWN0VG8oJ2xvZ2dlZEluL3N0cmVhbXMnKSksXG4gIC8vICAgICAgIHBhdGgoJ3N0cmVhbXMnLCAnbG9nZ2VkSW4vc3RyZWFtcy9pbmRleCcsIFtcbiAgLy8gICAgICAgICBwYXRoKCc6c3RyZWFtSWQnLCAnbG9nZ2VkSW4vc3RyZWFtcy9zaG93JylcbiAgLy8gICAgICAgXSksXG4gIC8vICAgICAgIHBhdGgoJ2xvZ2luJywgJ2xvZ2dlZE91dCcpXG4gIC8vICAgICBdKTtcbiAgLy9cbiAgLy8gICAgIHN0YXRlQ2hhcnQgPSBuZXcgU3RhdGVDaGFydCh7XG4gIC8vICAgICAgIGF0dHJzOntcbiAgLy8gICAgICAgICB1c2VyOigpPT5Vc2VyLmN1cnJlbnRVc2VyKCkuY2F0Y2goZXJyPT50aGlzLmZpcmUoJ2xvZ091dCcpKVxuICAvLyAgICAgICB9LFxuICAvL1xuICAvLyAgICAgICBldmVudHM6e1xuICAvLyAgICAgICAgICdsb2dPdXQnOiAnbG9nZ2VkT3V0J1xuICAvLyAgICAgICB9LFxuICAvL1xuICAvLyAgICAgICBzdGF0ZXM6e1xuICAvLyAgICAgICAgICdsb2dnZWRJbic6e1xuICAvLyAgICAgICAgICAgYXR0cnM6e1xuICAvLyAgICAgICAgICAgICAndXNlcic6KCk9Pm5ldyBGaXJlYmFzZVNpbXBsZUxvZ2luKG5ldyBGaXJlYmFzZSh0aGlzLmxvY2F0aW9uKSwgKGVycm9yLCBmYlVzZXIpPT57XG4gIC8vICAgICAgICAgICAgICAgaWYoIWVycm9yKSByZXNvbHZlKFVzZXIuZ2V0KGZiVXNlci5pZCkuJHByb21pc2UpO1xuICAvLyAgICAgICAgICAgICAgIGVsc2UgcmVqZWN0KCk7XG4gIC8vICAgICAgICAgICAgIH0pLmxvZ2luKCdnaXRodWInLCB7cmVtZW1iZXJNZTp0cnVlfSlcbiAgLy8gICAgICAgICAgIH0sXG4gIC8vICAgICAgICAgICBzdGF0ZXM6Y29uY3VycmVudCh7XG4gIC8vICAgICAgICAgICAgICdtYWluJzp7XG4gIC8vICAgICAgICAgICAgICAgc3RhdGVzOntcbiAgLy8gICAgICAgICAgICAgICAgICdzdHJlYW1zJzp7XG4gIC8vICAgICAgICAgICAgICAgICAgIHN0YXRlczp7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgJ2luZGV4Jzp7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBhdHRyczp7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICdzdHJlYW1zJzooKT0+dGhpcy51c2VyXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgICAgICAgfSxcbiAgLy8gICAgICAgICAgICAgICAgICAgICAnc2hvdyc6e1xuICAvLyAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbJ3N0cmVhbUlkJ10sXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBhdHRyczp7XG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICdzdHJlYW0nOih7c3RyZWFtSWR9KT0+U3RyZWFtcy5nZXQoc3RyZWFtSWQpXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICAgICAgICB9LFxuICAvL1xuICAvLyAgICAgICAgICAgICAgICAgJ3N0cmVhbVNlYXJjaCc6e1xuICAvLyAgICAgICAgICAgICAgICAgICBldmVudHM6e1xuICAvLyAgICAgICAgICAgICAgICAgICAgICdzdHJlYW1TZWxlY3RlZCc6IGdvdG8oJy4uL3N0cmVhbXMvc2hvdycsIChzdHJlYW1JZCk9Pih7c3RyZWFtSWR9KSlcbiAgLy8gICAgICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICAgIH1cbiAgLy8gICAgICAgICAgICAgfSxcbiAgLy8gICAgICAgICAgICAgJ2RyYXdlcic6e1xuICAvLyAgICAgICAgICAgICAgIHN0YXRlczp7XG4gIC8vICAgICAgICAgICAgICAgICAnZXhwYW5kZWQnOnt9LFxuICAvLyAgICAgICAgICAgICAgICAgJ2NvbGxhcHNlZCc6e30sXG4gIC8vICAgICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgICB9XG4gIC8vICAgICAgICAgICB9KVxuICAvLyAgICAgICAgIH0sXG4gIC8vXG4gIC8vICAgICAgICAgJ2xvZ2dlZE91dCc6e1xuICAvLyAgICAgICAgICAgZXZlbnRzOntcbiAgLy8gICAgICAgICAgICAgJ2xvZ2luJzogZ290bygnLi4vbG9nZ2VkSW4nLCAoe3VzZXIscGFzc30pPT57dXNlcixwYXNzfSlcbiAgLy8gICAgICAgICAgICAgfVxuICAvLyAgICAgICAgICAgfVxuICAvLyAgICAgICAgIH1cbiAgLy8gICAgICAgfVxuICAvLyAgICAgfSk7XG4gIC8vICAgfSk7XG4gIC8vIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
