System.register(["base/build/svengali"], function($__export) {
  "use strict";
  var StateChart,
      attrValue;
  return {
    setters: [function(m) {
      StateChart = m.StateChart;
      attrValue = m.attrValue;
    }],
    execute: function() {
      var $__0 = this;
      describe('StateChart', (function() {
        describe('Login', (function() {
          var stateChart;
          beforeEach((function() {
            stateChart = new StateChart({
              enter: function() {
                $__0.fb = new Firebase('https://ticker-test.firebaseio.com');
              },
              attrs: {user: (function() {
                  return new Promise((function(resolve) {
                    return $__0.fb.authWithOAuthRedirect('github', (function(error, authData) {
                      return resolve(User.get(fbUser.id).$promise.catch((function(error) {
                        return new User({
                          id: fbUser.id,
                          eventStreams: []
                        }).$save().$promise;
                      })).then((function(user) {
                        return $__0.user = user;
                      })));
                    }));
                  }));
                })}
            });
          }));
        }));
      }));
    }
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzIiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMSIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8wIiwiZXhhbXBsZV9sb2dpbl9zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssU0FBUyxBQUFDLHlCQUFvQixVQUFTLFNBQVE7Ozs7QUNBcEQsT0FBTztBQUNELFVBQU0sR0NEWixTQUFTLENBQUE7QUNBVCxpQkFBb0IsRUFBQSxXQUFrQixDQUFDO0FBQXZDLGdCQUFvQixFQUFBLFVBQWtCLENBQUM7SURFL0IsQ0REdUI7QUFDekIsVUFBTTs7QUdBWixhQUFPLEFBQUMsQ0FBQyxZQUFXLEdBQUcsU0FBQSxBQUFDO0FBQ3RCLGVBQU8sQUFBQyxDQUFDLE9BQU0sR0FBRyxTQUFBLEFBQUM7QUFDakIsQUFBSSxZQUFBLENBQUEsVUFBUyxDQUFDO0FBRWQsbUJBQVMsQUFBQyxFQUFDLFNBQUEsQUFBQztBQWNWLHFCQUFTLEVBQUksSUFBSSxXQUFTLEFBQUMsQ0FBQztBQUMxQixrQkFBSSxDQUFKLFVBQUssQUFBQyxDQUFDO0FBQ0wsc0JBQU0sRUFBSSxJQUFJLFNBQU8sQUFBQyxDQUFDLG9DQUFtQyxDQUFDLENBQUM7Y0FDOUQ7QUFDQSxrQkFBSSxDQUFFLEVBQ0osSUFBRyxHQUFFLFNBQUEsQUFBQzt1QkFBRyxJQUFJLFFBQU0sQUFBQyxFQUFDLFNBQUEsT0FBTTt5QkFDekIsQ0FBQSxPQUFNLHNCQUFzQixBQUFDLENBQUMsUUFBTyxHQUFHLFNBQUMsS0FBSSxDQUFHLENBQUEsUUFBTzsyQkFBSSxDQUFBLE9BQU0sQUFBQyxDQUNoRSxJQUFHLElBQUksQUFBQyxDQUFDLE1BQUssR0FBRyxDQUFDLFNBQVMsTUFDckIsQUFBQyxFQUFDLFNBQUEsS0FBSTs2QkFFUixDQUFBLEdBQUksS0FBRyxBQUFDLENBQUM7QUFDUCwyQkFBQyxDQUFFLENBQUEsTUFBSyxHQUFHO0FBQ1gscUNBQVcsQ0FBRSxHQUFDO0FBQUEsd0JBQ2hCLENBQUMsTUFBTSxBQUFDLEVBQUMsU0FBUztzQkFBQSxFQUNwQixLQUNHLEFBQUMsRUFBQyxTQUFBLElBQUc7NkJBQUcsQ0FBQSxTQUFRLEVBQUksS0FBRztzQkFBQSxFQUFDLENBQy9CO29CQUFBLEVBQUM7a0JBQUEsRUFDSDtnQkFBQSxDQUFBLENBQ0Y7QUFBQSxZQXFERixDQUFDLENBQUM7VUFDSixFQUFDLENBQUM7UUFDSixFQUFDLENBQUM7TUFDSixFQUFDLENBQUM7SUg1RjZCO0VBQzNCLENBQUE7QURESSxDQUFDLENBQUM7QUk2RlYiLCJmaWxlIjoiZXhhbXBsZV9sb2dpbl9zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiU3lzdGVtLnJlZ2lzdGVyKCRfX3BsYWNlaG9sZGVyX18wLCBmdW5jdGlvbigkX19leHBvcnQpIHtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMVxuICAgICAgICB9KTsiLCJyZXR1cm4ge1xuICAgICAgc2V0dGVyczogJF9fcGxhY2Vob2xkZXJfXzAsXG4gICAgICBleGVjdXRlOiAkX19wbGFjZWhvbGRlcl9fMVxuICAgIH0iLCJmdW5jdGlvbihtKSB7XG4gICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzBcbiAgICAgICAgfSIsIiRfX3BsYWNlaG9sZGVyX18wID0gbS4kX19wbGFjZWhvbGRlcl9fMTsiLCJpbXBvcnQge1N0YXRlQ2hhcnQsIGF0dHJWYWx1ZX0gZnJvbSAnYmFzZS9idWlsZC9zdmVuZ2FsaSc7XG5cbmRlc2NyaWJlKCdTdGF0ZUNoYXJ0JywgKCk9PntcbiAgZGVzY3JpYmUoJ0xvZ2luJywgKCk9PntcbiAgICB2YXIgc3RhdGVDaGFydDtcblxuICAgIGJlZm9yZUVhY2goKCk9PntcbiAgICAgIC8vIG5ldyBSb3V0ZXIoW1xuICAgICAgLy8gICBwYXRoKCcvJywgcmVkaXJlY3RUbygnbG9nZ2VkSW4vc3RyZWFtcycpKSxcbiAgICAgIC8vICAgcGF0aCgnc3RyZWFtcycsICdsb2dnZWRJbi9zdHJlYW1zL2luZGV4JywgW1xuICAgICAgLy8gICAgIHBhdGgoJzpzdHJlYW1JZCcsICdsb2dnZWRJbi9zdHJlYW1zL3Nob3cnKVxuICAgICAgLy8gICBdKSxcbiAgICAgIC8vICAgcGF0aCgnbG9naW4nLCAnbG9nZ2VkT3V0JylcbiAgICAgIC8vIF0pO1xuXG4gICAgICAvLyBPZmZsaW5lIGxvZ2dlZCBpbiBiZWZvcmVcbiAgICAgIC8vIE9mZmxpbmUgbG9nZ2VkIG91dFxuICAgICAgLy8gT25saW5lIGxvZ2dlZCBpblxuICAgICAgLy8gT25saW5lIGxvZ2dlZCBvdXRcblxuICAgICAgc3RhdGVDaGFydCA9IG5ldyBTdGF0ZUNoYXJ0KHtcbiAgICAgICAgZW50ZXIoKXtcbiAgICAgICAgICB0aGlzLmZiID0gbmV3IEZpcmViYXNlKCdodHRwczovL3RpY2tlci10ZXN0LmZpcmViYXNlaW8uY29tJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJzOntcbiAgICAgICAgICB1c2VyOigpPT5uZXcgUHJvbWlzZShyZXNvbHZlPT5cbiAgICAgICAgICAgIHRoaXMuZmIuYXV0aFdpdGhPQXV0aFJlZGlyZWN0KCdnaXRodWInLCAoZXJyb3IsIGF1dGhEYXRhKT0+cmVzb2x2ZShcbiAgICAgICAgICAgICAgVXNlci5nZXQoZmJVc2VyLmlkKS4kcHJvbWlzZS5cbiAgICAgICAgICAgICAgICBjYXRjaChlcnJvcj0+XG4gICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdXNlciB3aXRoIG5vIHN0cmVhbXNcbiAgICAgICAgICAgICAgICAgIG5ldyBVc2VyKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ZmJVc2VyLmlkLFxuICAgICAgICAgICAgICAgICAgICBldmVudFN0cmVhbXM6W11cbiAgICAgICAgICAgICAgICAgIH0pLiRzYXZlKCkuJHByb21pc2VcbiAgICAgICAgICAgICAgICApLlxuICAgICAgICAgICAgICAgIHRoZW4odXNlcj0+dGhpcy51c2VyID0gdXNlcilcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgKVxuICAgICAgICB9LFxuICAgICAgICAvLyBzdGF0ZXM6IHtcbiAgICAgICAgLy8gICAnbG9nZ2VkSW4nOntcbiAgICAgICAgLy8gICAgIHN0YXRlczpjb25jdXJyZW50KHtcbiAgICAgICAgLy8gICAgICAgJ21haW5WaWV3Jzp7XG4gICAgICAgIC8vICAgICAgICAgc3RhdGVzOntcbiAgICAgICAgLy8gICAgICAgICAgICdzdHJlYW1zJzp7XG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXRlczp7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgJ2luZGV4Jzp7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBhdHRyczp7J3N0cmVhbXMnOigpPT50aGlzLnVzZXJ9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgfSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAnc2hvdyc6e1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgcGFyYW1zOiBbJ3N0cmVhbUlkJ10sXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBhdHRyczp7J3N0cmVhbSc6KHtzdHJlYW1JZH0pPT5TdHJlYW1zLmdldChzdHJlYW1JZCl9XG4gICAgICAgIC8vICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICB9LFxuICAgICAgICAvL1xuICAgICAgICAvLyAgICAgICAgICAgJ3NlYXJjaCc6e1xuICAgICAgICAvLyAgICAgICAgICAgICBhdHRyczp7J2lzU2VhcmNoaW5nJzp0cnVlfVxuICAgICAgICAvLyAgICAgICAgICAgICBldmVudHM6e1xuICAgICAgICAvLyAgICAgICAgICAgICAgICdzZWxlY3RTdHJlYW0nOmdvdG8oJy4uL3N0cmVhbXMvc2hvdycsIHN0cmVhbUlkPT57c3RyZWFtSWR9KVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAnZHJhd2VyVmlldyc6e1xuICAgICAgICAvLyAgICAgICAgIHN0YXRlczp7XG4gICAgICAgIC8vICAgICAgICAgICAnZXhwYW5kZWQnOntcbiAgICAgICAgLy8gICAgICAgICAgICAgYXR0cnM6eydpc0RyYXdlckV4cGFuZGVkJzp0cnVlfSxcbiAgICAgICAgLy8gICAgICAgICAgICAgZXZlbnRzOntcbiAgICAgICAgLy8gICAgICAgICAgICAgICAnc2VsZWN0U3RyZWFtJzpnb3RvKCcuLi8uLi9tYWluVmlldy9zdHJlYW1zL3Nob3cnLCBzdHJlYW1JZD0+e3N0cmVhbUlkfSksXG4gICAgICAgIC8vICAgICAgICAgICAgICAgJ3NlbGVjdFNlYXJjaCc6Jy4uLy4uL21haW5WaWV3L3NlYXJjaCdcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgfSxcbiAgICAgICAgLy8gICAgICAgICAgICdjb2xsYXBzZWQnOnt9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICB9XG4gICAgICAgIC8vICAgICB9KVxuICAgICAgICAvLyAgIH0sXG4gICAgICAgIC8vICAgJ2xvZ2dlZE91dCc6e1xuICAgICAgICAvLyAgICAgc3RhdGVzOntcbiAgICAgICAgLy8gICAgICAgJ2F0dGVtcHRpbmdMb2dpbic6e1xuICAgICAgICAvLyAgICAgICAgIGVudGVyKHt1c2VyLHBhc3N9KXt9XG4gICAgICAgIC8vICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICd3YWl0aW5nRm9yTG9naW4nOnt9XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICAvLyBldmVudHM6e1xuICAgICAgICAvLyAgICd3ZW50T25saW5lJzonJyxcbiAgICAgICAgLy8gICAnd2VudE9mZmxpbmUnOicnXG4gICAgICAgIC8vIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
