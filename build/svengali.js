System.register([], function($__export) {
  "use strict";
  var StateChart,
      EMPTY_OBJ,
      NOOP,
      nextStateUID,
      State;
  function attrValue(val) {
    if (this instanceof attrValue)
      this.val = val;
    else
      return new attrValue(val);
  }
  $__export("attrValue", attrValue);
  return {
    setters: [],
    execute: function() {
      StateChart = $__export("StateChart", (function() {
        var StateChart = function StateChart(rootStateOptions) {
          this.attrs = {};
          this.rootState = new State(null, this, rootStateOptions);
        };
        return ($traceurRuntime.createClass)(StateChart, {goto: function() {
            var path = arguments[0] !== (void 0) ? arguments[0] : '.';
            var params = arguments[1] !== (void 0) ? arguments[1] : {};
            this.rootState.scState.goto(path, {context: params});
          }}, {});
      }()));
      EMPTY_OBJ = {};
      NOOP = (function() {
        return EMPTY_OBJ;
      });
      nextStateUID = 1;
      State = $__export("State", (function() {
        var State = function State(parent, stateChart, $__2) {
          var $__3 = $__2,
              concurrent = $__3.concurrent,
              history = $__3.history,
              params = $__3.params,
              attrs = $__3.attrs,
              enter = $__3.enter,
              exit = $__3.exit,
              events = $__3.events,
              states = $__3.states,
              defaultState = $__3.default;
          var name = arguments[3] !== (void 0) ? arguments[3] : nextStateUID++;
          var $__0 = this;
          this.params = params;
          this.stateChart = stateChart;
          this.attrs = attrs || EMPTY_OBJ;
          this.enter = enter || NOOP;
          this.exit = exit || NOOP;
          var scState = this.scState = statechart.State(name, {
            name: name,
            concurrent: !!concurrent,
            history: !!history
          });
          if (params)
            scState.canEnter = (function(states, params) {
              return $__0._canEnter_checkParams(params);
            });
          scState.enter((function(params) {
            return $__0._doEnter(params);
          }));
          scState.exit((function() {
            return $__0._doExit();
          }));
          if (events)
            Object.keys(events).forEach((function(eventName) {
              return scState.event(eventName, events[eventName]);
            }));
          if (states)
            (defaultState && states[defaultState] ? [defaultState] : []).concat(Object.keys(states)).forEach((function(stateName) {
              return scState.addSubstate(new State($__0, stateChart, states[stateName], stateName).scState);
            }));
        };
        return ($traceurRuntime.createClass)(State, {
          _setAttrValue: function(name, val) {
            this.stateChart.attrs[name] = val;
          },
          _canEnter_checkParams: function(params) {
            if (this.params)
              return params ? this.params.every((function(p) {
                return p in params;
              })) : false;
          },
          _doEnter_setAttrs: function(context) {
            var $__0 = this;
            Object.keys(this.attrs).forEach((function(a) {
              var val = $__0.attrs[a];
              val = (typeof val === 'function') ? val(context) : val;
              if (!(val instanceof Promise))
                $__0._setAttrValue(a, (val instanceof attrValue ? val.val : val));
              else
                val.then((function(value) {
                  if ($__0.scState.__isCurrent__)
                    $__0._setAttrValue(a, value);
                }));
            }));
          },
          _doEnter: function(context) {
            this._doEnter_setAttrs(context);
            this.enter();
          },
          _doExit: function() {
            var $__0 = this;
            this.exit();
            Object.keys(this.attrs).forEach((function(a) {
              return delete $__0.stateChart.attrs[a];
            }));
          }
        }, {});
      }()));
    }
  };
});

//# sourceMappingURL=data:application/json;base64,
